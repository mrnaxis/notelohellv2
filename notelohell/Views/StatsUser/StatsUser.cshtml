
@{
    ViewBag.Title = "StatsUser";
}

<style>
    .panel-heroes {
        border-radius: 5px;
        background-color: #ffffff;
        border: 1px solid #ddd;
    }

    .heroes-item {
        width: 15%;
        margin: 4px 4px 4px 4px;
    }
    .area-margin {
        margin: 10px 10px 10px 10px;
    }
</style>

<div class="container-fluid">
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <div id="loadingData" class="ld-dt centro hidden"><span class="fa fa-spinner fa-pulse fa-5x fa-fw text-center" style="color:black;" aria-hidden="true"></span></div>
    <div id="panelDataGame" class="divlazuli hidden">
        <div class="centro-2">
            <div class="container-fluid">
                <div class="row">
                    <br />
                    <div class="col-md-1 col-lg-1" style="padding-right: 10em;">
                        <div id="avatar-player" class="img-responsive"></div>
                        <h4 class="tag-player"></h4>
                    </div>
                    <div class="col-md-10 col-lg-10">
                        <h2 class="name-player"></h2>
                    </div>
                    <div class="col-md-12 col-lg-12">
                        <h5>Principal Tipo de Herói Quick: </h5><h4 class="main-type-Quick"></h4>
                        <h5>Principal Tipo de Herói Comp: </h5><h4 class="main-type-Comp"></h4>
                    </div>
                </div>
                <div class="row">
                    <h3>Tarefas: </h3>
                    <div class="col-md-6 col-lg-6">
                        <ul id="task-list" class="list-group"></ul>
                    </div>
                    <div class="col-md-6 col-lg-6">
                        <div id="task-graph"></div>
                    </div>
                </div>
                <div class="row">
                    <ul class="nav nav-tabs" role="tablist">
                        <li role="presentation" class="active"><a href="#quick" aria-controls="quick" role="tab" data-toggle="tab">Quickplay</a></li>
                        <li role="presentation"><a href="#comp" aria-controls="comp" role="tab" data-toggle="tab">Competitivo</a></li>
                    </ul>
                    <div class="tab-content">
                        <div id="quick" class="tab-pane active" role="tabpanel">
                            <h3>Status Gerais</h3>
                            <div class="col-md-12 area-margin">
                                <div class="col-md-6">
                                    <ul id="stats-ovl-quick" class="list-group"></ul>
                                </div>
                                <div class="col-md-6">
                                    <div id="chart-time-quick" class="hidden"></div>
                                </div>
                            </div>
                            <br />
                            <br />
                            <div class="col-md-12 area-margin">
                                <div class="col-md-6 panel-heroes">
                                    <div id="heroes-list-quick" class="">
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div id="heroes-info-quick" class="">
                                    </div>
                                </div>
                            </div>
                            <br />
                            <br />
                            <div class="col-md-12 area-margin">
                                <div class="col-md-6">
                                    <div id="chart-damage-quick"></div>
                                </div>
                                <div class="col-md-6">
                                    <div id="chart-kills-quick"></div>
                                </div>
                            </div>
                            <br />
                            <br />
                            <div class="col-md-12 area-margin">
                                <div id="ExtraGraphsNDataQuick">

                                </div>
                            </div>
                            <br />
                            <br />
                        </div>
                        <div id="comp" class="tab-pane" role="tabpanel">
                            <h3>Status Gerais</h3>
                            <div class="col-md-12 area-margin">
                                <div class="col-md-6">
                                    <ul id="stats-ovl-comp" class="list-group">
                                        @if (ViewBag.Media != null)
                                        {
                                            var st = ViewBag.Media;
                                            <li class='list-group-item'>
                                                <span class='txt-black'>
                                                    Media do Jogador:
                                                    @ViewBag.Media %
                                                </span>
                                            </li>
                                        }

                                        @if (ViewBag.MediaGeral != null)
                                        {
                                            var st = ViewBag.MediaGeral;
                                            <li class='list-group-item'>
                                                <span class='txt-black'>
                                                    Media Geral dos jogadores:
                                                    @ViewBag.MediaGeral %
                                                </span>
                                            </li>
                                        }
                                    </ul>
                                </div>
                                <div class="col-md-6">
                                    <div id="chart-time-comp" class="hidden"></div>
                                </div>
                            </div>
                            <br />
                            <br />
                            <div class="col-md-12 area-margin">
                                <div class="col-md-6 panel-heroes">
                                    <div id="heroes-list-comp" class="">
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div id="heroes-info-comp">
                                    </div>
                                </div>
                            </div>
                            <br />
                            <br />
                            <div class="col-md-12 area-margin">
                                <div class="col-md-6">
                                    <div id="chart-damage-comp"></div>
                                </div>
                                <div class="col-md-6">
                                    <div id="chart-kills-comp"></div>
                                </div>
                            </div>
                            <br />
                            <br />
                            <div class="col-md-12 area-margin">
                                <div id="ExtraGraphsNDataComp">

                                </div>
                            </div>
                            <br />
                            <br />
                        </div>
                    </div>
                    <br />
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function EnviarDados() {

        if (!$("#panelDataGame").hasClass("hidden"))
            $("#panelDataGame").addClass("hidden");

        if ($("#loadingData").hasClass("hidden"))
            $("#loadingData").removeClass("hidden");

        $.ajax({
            type: "POST",
            url: "@Url.Action("BuscarDadosJogos", "StatsUser")",
                data: "",
                contentType: "application/json;",
                dataType: "json",
                success: function (data) {
                    $("#send").removeAttr("disabled");
                    $("#loadingData").addClass("hidden");
                    $("#panelDataGame").removeClass("hidden");
                    if (data !== null) {
                        var an = JSON.parse(data);
                        google.charts.load('current', { packages: ['corechart'] });
                        google.charts.setOnLoadCallback(function () { TimeGraphs(); GraphsGeneral(); DataHeroes(); GetDataFromTasks();});
                    }

                    GetAvgStatus(an, 'comp');
                    GetAvgStatus(an, 'quick');
                    GetHeroesNStats(an, 'quick');
                    GetHeroesNStats(an, 'comp');

                    function TimeGraphs() {
                        ConstructTheTimeGraphs(an, 'comp');
                        ConstructTheTimeGraphs(an, 'quick');
                    }

                    function GraphsGeneral() {
                        ConstructTheGeneralStatsGraphs(an, 'quick', 'chart-damage-quick', 'Damage', 'all_damage_done');
                        ConstructTheGeneralStatsGraphs(an, 'comp', 'chart-damage-comp', 'Damage', 'all_damage_done');
                        ConstructTheGeneralStatsGraphs(an, 'quick', 'chart-kills-quick', 'Kills', 'eliminations');
                        ConstructTheGeneralStatsGraphs(an, 'comp', 'chart-kills-comp', 'Kills', 'eliminations');
                    }
                    function DataHeroes() {
                        CompareDataHeroes(an, 'Quick');
                        CompareDataHeroes(an, 'Comp');
                        CompareNSeeTypesByTime(an, 'Quick');
                        CompareNSeeTypesByTime(an, 'Comp');
                    }
                },
                error: function () {
                    alert("Deu Ruim! Tente Novamente!");
                    $("#send").removeAttr("disabled");
                    $("#loadingData").addClass("hidden");
                }
            });

        }
    $(document).ready(function () {
        EnviarDados();
    });

    function CKST(fieldToBeChecked) {
        if (typeof fieldToBeChecked === 'undefined' || typeof fieldToBeChecked === 'null')
            return 0;
        return fieldToBeChecked;
    }

    function GetAvgStatus(d, typeCons) {
        //pega o status básicos do jogador, sendo eles apenas dados individuais.
        if ((typeof d !== 'string' || typeof d !== 'object') && typeof typeCons !== 'string')
            return null;

        var lin = d.us.stats;
        if (typeof lin !== 'undefined') {

            var reqName = d._request.route;
            $(".tag-player").html("<i>" + reqName.split('/')[4].replace('-','#')+"</i>");
            $(".name-player").html("" + reqName.split('/')[4].split('-')[0]);

            if (typeCons === 'comp') {
                var lincompov = lin.competitive.overall_stats;
                var lincompgs = lin.competitive.game_stats;
                $("#avatar-player").html("<img class='img-rounded' src='" + lincompov['avatar'] + "' alt='PlayerChar'/>");
                $("#stats-ovl-" + typeCons).append("<li class='list-group-item'><span class='txt-black'>Ranking : " +
                    CKST(lincompov['comprank'] === null ? "N/A" : lincompov['comprank'])
                    + "</span></li>");
                $("#stats-ovl-" + typeCons).append("<li class='list-group-item'><span class='txt-black'>Vitórias: " +
                    CKST(lincompov['wins'])
                    + "</span></li>");
                $("#stats-ovl-" + typeCons).append("<li class='list-group-item'><span class='txt-black'>Total Medalhas: " +
                    CKST(lincompgs['medals'])
                    + "</span></li>");
                $("#stats-ovl-" + typeCons).append("<li class='list-group-item'><span class='txt-black'>KPD: " +
                    CKST(lincompgs['kpd'])
                    + "</span></li>");
                $("#stats-ovl-" + typeCons).append("<li class='list-group-item'><span class='txt-black'>Total de Horas de Jogo: " +
                    CKST(lincompgs['time_played'])
                    + "</span></li>");
            }
            else if (typeCons === 'quick')
            {
                var linquickov = lin.quickplay.overall_stats;
                var linquickgs = lin.quickplay.game_stats;
                $("#avatar-player").html("<img class='img-rounded' src='" + linquickov['avatar'] + "' alt='PlayerChar'/>");
                $("#stats-ovl-" + typeCons).append("<li class='list-group-item'><span class='txt-black'>Vitórias: " +
                    CKST(linquickgs['games_won'])
                    + "</span></li>");
                $("#stats-ovl-" + typeCons).append("<li class='list-group-item'><span class='txt-black'>Total Medalhas(g/s/b): " +
                    CKST(linquickgs['medals'])
                    + "</span></li>");
                $("#stats-ovl-" + typeCons).append("<li class='list-group-item'><span class='txt-black'>KPD: " +
                    CKST(linquickgs['kpd'])
                    + "</span></li>");
                $("#stats-ovl-" + typeCons).append("<li class='list-group-item'><span class='txt-black'>Total de Horas de Jogo: " +
                    CKST(linquickgs['time_played'])
                    + "</span></li>");
            }
        }
    }

    function ChangePanel(idName, dadElement) {
        if (typeof idName !== "string" || typeof dadElement !== "string")
            return null;

        var c = $("#" + dadElement).children();
        c.addClass("hidden");
        var nextChanged = c.closest("."+idName);
        nextChanged.removeClass("hidden");
    }

    function GetHeroesNStats(d, typeCons) {
        if ((typeof d !== 'string' || typeof d !== 'object') && typeof typeCons !== 'string')
            return null;

        var linheroes = d.us.heroes;
        var linquick = typeCons === "quick" ? linheroes.stats.quickplay : linheroes.stats.competitive;

        for (var i in linquick) {
            if (linquick.hasOwnProperty(i)) {
                var fns = "ChangePanel('" + i.trim() + "-" + typeCons + "', 'heroes-info-" + typeCons + "'); event.preventDefault();";
                $("#heroes-list-" + typeCons).append("<div class='col-md-1 heroes-item'><span class='txt-black'><a id='" + i + "-" + typeCons
                    + "' href='#' onclick=\""+fns+"\"> " + i + "</a></span></div>");
                //$("#" + i).on("click", function () { ChangePanel(i, "heroes-info-" + typeCons) });
            }
        }

        for (var i in linquick) {
            if (linquick.hasOwnProperty(i)) {
                $("#heroes-info-" + typeCons).append("<ul class='list-group " + i + '-' + typeCons + " hidden'></ul>");
                $("." + i + '-' + typeCons).append("<li class='list-group-item'><span class='txt-black'><b> " + i + "</b></span></li>");
                $("." + i + '-' + typeCons).append("<li class='list-group-item'><span class='txt-black'>Vitórias: " + CKST(linquick[i].general_stats.games_won) + "</span></li>");
                $("." + i + '-' + typeCons).append("<li class='list-group-item'><span class='txt-black'>Total de Dano Causado: " + CKST(linquick[i].general_stats.all_damage_done) + "</span></li>");
                $("." + i + '-' + typeCons).append("<li class='list-group-item'><span class='txt-black'>Eliminações : " + CKST(linquick[i].general_stats.eliminations) + "</span></li>");
                $("." + i + '-' + typeCons).append("<li class='list-group-item'><span class='txt-black'>Eliminações Solo: " + CKST(linquick[i].general_stats.solo_kills) + "</span></li>");
                $("." + i + '-' + typeCons).append("<li class='list-group-item'><span class='txt-black'>Mortes : " + CKST(linquick[i].general_stats.deaths) + "</span></li>");
                $("." + i + '-' + typeCons).append("<li class='list-group-item'><span class='txt-black'>KPD - Solo : " + CKST(linquick[i].general_stats.solo_kills / linquick[i].general_stats.deaths) + "</span></li>");
                $("." + i + '-' + typeCons).append("<li class='list-group-item'><span class='txt-black'>KPD - Geral : " + CKST(linquick[i].general_stats.eliminations / linquick[i].general_stats.deaths) + "</span></li>");
                $("." + i + '-' + typeCons).append("<li class='list-group-item'><span class='txt-black'>Total Medalhas(g/s/b) : " + CKST(linquick[i].general_stats.medals) + "</span></li>");
            }
        }
    }

    function GetHeroesByType() {
        return {
            "tank": ["dva", "orisa", "reinhardt", "roadhog", "winston", "zarya"],
            "support": ["mercy", "ana", "symmetra", "lucio", "zenyatta", "moira"],
            "offensive": ["doomfist", "genji", "mccree", "pharah", "reaper", "soldier76", "sombra", "tracer"],
            "defensive": ["bastion", "hanzo", "junkrat", "mei", "torbjorn", "widowmaker"]
        };
    }

    function CompareNSeeTypesByTime(d, typeCons) {
        if ((typeof d !== 'string' || typeof d !== 'object') && typeof typeCons !== 'string') {
            return null;
        }

        var lin;

        if (typeCons === 'Quick')
            lin = d.us.heroes.playtime.quickplay
        else
            lin = d.us.heroes.playtime.competitive;

        var heroes = GetHeroesByType();

        var tank = 0, supp = 0, offen = 0, defen = 0;
        var dtTimeSpentPerType = [['Type', 'Time']];

        for (var i in lin) {
            if (lin.hasOwnProperty(i)) {
                if (heroes["tank"].indexOf(i) >= 0)
                    tank += CKST(lin[i]);
                if (heroes["support"].indexOf(i) >= 0)
                    supp += CKST(lin[i]);
                if (heroes["offensive"].indexOf(i) >= 0)
                    offen += CKST(lin[i]);
                if (heroes["defensive"].indexOf(i) >= 0)
                    defen += CKST(lin[i]);
            }
        }

        dtTimeSpentPerType.push(["Tank", tank]);
        dtTimeSpentPerType.push(["Suporte", supp]);
        dtTimeSpentPerType.push(["Ofensivo", offen]);
        dtTimeSpentPerType.push(["Defensivo", defen]);

        $("#ExtraGraphsNData" + typeCons).append("<div class='col-md-6'><div id='graph-TypesTime-" + typeCons + "'></div></div>");

        ConstructGraphsBare(dtTimeSpentPerType, "graph-TypesTime-" + typeCons, "Tempo por Tipo de Heróis");

        var obj = { 'Tanque': tank, 'Suporte': supp, 'Ofensivo': offen, 'Defensivo': defen };
        var arrayValues = [tank, supp, offen, defen];
        arrayValues.sort();

        var biggerValue = 0;
        var Type = "N/A";

        for (var t in obj) {
            if (obj.hasOwnProperty(t)) {
                if (obj[t] == arrayValues[0]) {
                    biggerValue = arrayValues;
                    Type = t;
                    break;
                }
            }
        }

        $("#stats-ovl-" + typeCons).append("<li class='list-group-item'><span class='txt-black'>Principal Tipo de Herói Usado: " +
            CKST(Type)
            + "</span></li>");

        $(".main-type-" + typeCons).text(Type);

    }

    function CompareDataHeroes(d, typeCons) {
        if ((typeof d !== 'string' || typeof d !== 'object') && typeof typeCons !== 'string') {
            return null;
        }

        var lin;

        if (typeCons === 'Quick')
            lin = d.us.heroes.stats.quickplay;
        else
            lin = d.us.heroes.stats.competitive;

        var heroes = GetHeroesByType();

        var dtBarrier = [['Hero', 'Damage Blocked']];
        var dtHealing = [['Hero', 'Healing']];
        var dtDamage = [['Hero', 'Damage']];
        var dtObjKills = [['Hero', 'Objective Kills']];

        for (var i in lin) {
            if (lin.hasOwnProperty(i)) {
                if (heroes["tank"].indexOf(i) >= 0) {
                    var l = lin[i];
                    dtBarrier.push([i, CKST(l.hero_stats.damage_blocked)]);
                }
                else if (heroes["support"].indexOf(i) >= 0 && i.search("symmetr") < 0) {
                    var l = lin[i];
                    dtHealing.push([i, CKST(l.general_stats.healing_done)]);
                }
                else if (heroes["offensive"].indexOf(i) >= 0) {
                    var l = lin[i];
                    dtDamage.push([i, CKST(l.general_stats.all_damage_done)]);
                }
                else if (heroes["defensive"].indexOf(i) >= 0) {
                    var l = lin[i];
                    dtObjKills.push([i, CKST(l.general_stats.objective_kills)]);
                }
            }
        }

        if (dtBarrier.length > 0) {
            $("#ExtraGraphsNData" + typeCons).append("<div class='col-md-6'><div id='graph-barrier-" + typeCons + "'></div></div>");
            ConstructGraphsBare(dtBarrier, "graph-barrier-" + typeCons, "Dano Bloqueado");
        }
        if (dtHealing.length > 0) {
            $("#ExtraGraphsNData" + typeCons).append("<div class='col-md-6'><div id='graph-healing-" + typeCons + "'></div></div>");
            ConstructGraphsBare(dtHealing, "graph-healing-" + typeCons, "Cura");
        }
        if (dtDamage.length > 0) {
            $("#ExtraGraphsNData" + typeCons).append("<div class='col-md-6'><div id='graph-damage-" + typeCons + "'></div></div>");
            ConstructGraphsBare(dtDamage, "graph-damage-" + typeCons, "Dano Causado");
        }
        if (dtObjKills.length > 0) {
            $("#ExtraGraphsNData" + typeCons).append("<div class='col-md-6'><div id='graph-objkill-" + typeCons + "'></div></div>");
            ConstructGraphsBare(dtObjKills, "graph-objkill-" + typeCons, "Mortes no Objetivo");
        }

    }

    function ConstructGraphsBare(dt, gpLocalId, Title) {

        if ((typeof dt !== 'string' || typeof dt !== 'object') && typeof Title !== 'string') {
            return null;
        }

        if (typeof gpLocalId !== 'string')
            gpLocalId = 'chart-time-' + typeCons;

        var data = new google.visualization.arrayToDataTable(dt);

        // Set chart options
        var options = {
            'title': Title,
            'width': 580,
            'height': 500,

            'backgroundColor': {
                'stroke': '#fff',
                'strokeWidth': 1
            }

        };

        // Instantiate and draw our chart, passing in some options.
        var chart = new google.visualization.BarChart(document.getElementById(gpLocalId));
        chart.draw(data, options);
    }

    function ConstructTheGeneralStatsGraphs(d, typeCons, gpLocalId, field, idfield) {
        if ((typeof d !== 'string' || typeof d !== 'object') && typeof typeCons !== 'string') {
            return null;
        }

        if (typeof gpLocalId !== 'string')
            gpLocalId = 'chart-time-' + typeCons;

        var dt = [['Heroes',field]];
        var lin;

        if (typeCons === 'quick')
            lin = d.us.heroes.stats.quickplay;
        else
            lin = d.us.heroes.stats.competitive;

        if (typeof lin !== 'undefined') {
            for (var i in lin) {
                if (lin.hasOwnProperty(i)) {
                    var h = lin[i];
                    //if (Number(h.general_stats[idfield]) > 0)
                        dt.push([i, h.general_stats[idfield]]);
                }
            }

            var data = new google.visualization.arrayToDataTable(dt);

            // Set chart options
            var options = {
                'title': field,
                'width': 580,
                'height': 500,

                'backgroundColor': {
                    'stroke': '#fff',
                    'strokeWidth': 1
                }

            };

            // Instantiate and draw our chart, passing in some options.
            var chart = new google.visualization.BarChart(document.getElementById(gpLocalId));
            chart.draw(data, options);

            $("#" + gpLocalId).removeClass("hidden");
        }

    }

    function ConstructTheTimeGraphs(d, typeCons, gpLocalId) {
        //copiei na cara dura msm, e vou adaptar
        //Create the data table.
        if ((typeof d !== 'string' || typeof d !== 'object')
            && typeof typeCons !== 'string') {
            return null;
        }

        if (typeof gpLocalId !== 'string')
            gpLocalId = 'chart-time-' + typeCons;

        var dt = [['Heroes', 'Time']];
        var lin;

        if (typeCons === 'quick')
            lin = d.us.heroes.playtime.quickplay;
        else
            lin = d.us.heroes.playtime.competitive;

        if (typeof lin !== 'undefined') {
            for (var i in lin) {
                if (lin.hasOwnProperty(i)) {
                    if (Number(lin[i]) > 0)
                        dt.push([i, lin[i]]);
                }
            }

            var data = new google.visualization.arrayToDataTable(dt);

            // Set chart options
            var options = {
                'title': 'How Much Time Did I Waste?',
                'width': 500,
                'height': 450
            };

            // Instantiate and draw our chart, passing in some options.
            var chart = new google.visualization.BarChart(document.getElementById(gpLocalId));
            chart.draw(data, options);

            $("#" + gpLocalId).removeClass("hidden");
        }
    }

    function GetDataFromTasks() {

        var dtTasks = [['Status Tarefas', 'Status']];

        $.ajax({
            type: "POST",
            url: "@Url.Action("BuscarTasksGeral", "StatsUser")",
            data: "",
            contentType: "application/json;",
            dataType: "json",
            success: function (data) {
                if (typeof data !== 'undefined' || typeof data !== 'null') {
                    var tk = data;

                    var total = Number(tk.TasksTotal), pronto = Number(tk.TasksDone), nPronto = Number(tk.TaskUnDone);
                    $("#task-list").append("<li class='list-group-item'><span class='txt-black'>Tarefas Totais: "
                        + CKST(total) + "</span></li>");
                    dtTasks.push(['Totais', CKST(total)]);
                    $("#task-list").append("<li class='list-group-item'><span class='txt-black'>Tarefas Feitas: "
                        + CKST(pronto) + "</span></li>");
                    dtTasks.push(['Feitas', CKST(pronto)]);
                    $("#task-list").append("<li class='list-group-item'><span class='txt-black'>Tarefas Pendentes: "
                        + CKST(nPronto) + "</span></li>");
                    dtTasks.push(['Pendentes', CKST(nPronto)]);

                    if (dtTasks.length > 0 && Number(total + pronto + nPronto) !== 0) {
                        ConstructGraphsBare(dtTasks, 'task-graph', 'Status de Tarefas');
                    }
                }
            },
            error: function () {

            }
        });
    }
</script>